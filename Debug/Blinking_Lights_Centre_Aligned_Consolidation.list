
Blinking_Lights_Centre_Aligned_Consolidation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002564  08002564  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800256c  0800256c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002580  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002580  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009082  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001403  00000000  00000000  000290be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024435  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a402  00000000  00000000  0004fb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6770  00000000  00000000  00059f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001406b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  00140708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800253c 	.word	0x0800253c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800253c 	.word	0x0800253c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fa1a 	bl	800094a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f821 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8ed 	bl	80006f8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800051e:	f000 f883 	bl	8000628 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t pulse_width_1 = 10000; //ARR*0.25
 8000522:	f242 7310 	movw	r3, #10000	; 0x2710
 8000526:	607b      	str	r3, [r7, #4]
  uint32_t pulse_width_2 = 30000; //ARR*0.75
 8000528:	f247 5330 	movw	r3, #30000	; 0x7530
 800052c:	603b      	str	r3, [r7, #0]

  HAL_TIM_Base_Start(&htim3);
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <main+0x4c>)
 8000530:	f001 f950 	bl	80017d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x4c>)
 8000538:	f001 fa14 	bl	8001964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800053c:	2108      	movs	r1, #8
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x4c>)
 8000540:	f001 fa10 	bl	8001964 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width_1);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <main+0x4c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse_width_2);
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <main+0x4c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x48>
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 ffde 	bl	800252c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xc4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a26      	ldr	r2, [pc, #152]	; (8000620 <SystemClock_Config+0xc4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SystemClock_Config+0xc4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xc8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xc8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xc8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005cc:	2350      	movs	r3, #80	; 0x50
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fca3 	bl	8000f28 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e8:	f000 f8aa 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ff31 	bl	8001470 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000614:	f000 f894 	bl	8000740 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_TIM3_Init+0xc8>)
 800064e:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <MX_TIM3_Init+0xcc>)
 8000650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_TIM3_Init+0xc8>)
 8000654:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000658:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_TIM3_Init+0xc8>)
 800065c:	2260      	movs	r2, #96	; 0x60
 800065e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_TIM3_Init+0xc8>)
 8000662:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000666:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_TIM3_Init+0xc8>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_TIM3_Init+0xc8>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000674:	481e      	ldr	r0, [pc, #120]	; (80006f0 <MX_TIM3_Init+0xc8>)
 8000676:	f001 f91d 	bl	80018b4 <HAL_TIM_PWM_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f85e 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <MX_TIM3_Init+0xc8>)
 8000694:	f001 fe98 	bl	80023c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800069e:	f000 f84f 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	4619      	mov	r1, r3
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_TIM3_Init+0xc8>)
 80006ba:	f001 fa4d 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80006c4:	f000 f83c 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	2208      	movs	r2, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <MX_TIM3_Init+0xc8>)
 80006d4:	f001 fa40 	bl	8001b58 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80006de:	f000 f82f 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <MX_TIM3_Init+0xc8>)
 80006e4:	f000 f876 	bl	80007d4 <HAL_TIM_MspPostInit>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40000400 	.word	0x40000400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x44>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <MX_GPIO_Init+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_GPIO_Init+0x44>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_GPIO_Init+0x44>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x44>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x44>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x44>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_TIM_PWM_MspInit+0x38>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40000400 	.word	0x40000400
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <HAL_TIM_MspPostInit+0x9c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d137      	bne.n	8000866 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_TIM_MspPostInit+0xa0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000836:	2302      	movs	r3, #2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <HAL_TIM_MspPostInit+0xa4>)
 8000842:	f000 f9c5 	bl	8000bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000856:	2302      	movs	r3, #2
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <HAL_TIM_MspPostInit+0xa8>)
 8000862:	f000 f9b5 	bl	8000bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40000400 	.word	0x40000400
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f87a 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000922:	f7ff ffd7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 fddd 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fdef 	bl	800050c <main>
  bx  lr    
 800092e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002574 	.word	0x08002574
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	20000078 	.word	0x20000078

08000948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>

0800094a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094e:	2003      	movs	r0, #3
 8000950:	f000 f90a 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000954:	200f      	movs	r0, #15
 8000956:	f000 f805 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095a:	f7ff fef7 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f917 	bl	8000bb6 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 f8ed 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000074 	.word	0x20000074

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000074 	.word	0x20000074

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	05fa0000 	.word	0x05fa0000

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff47 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff5c 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb0 	bl	8000b24 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e175      	b.n	8000edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8164 	bne.w	8000ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x56>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80be 	beq.w	8000ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <HAL_GPIO_Init+0x324>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a65      	ldr	r2, [pc, #404]	; (8000ef4 <HAL_GPIO_Init+0x324>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <HAL_GPIO_Init+0x324>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d72:	4a61      	ldr	r2, [pc, #388]	; (8000ef8 <HAL_GPIO_Init+0x328>)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a58      	ldr	r2, [pc, #352]	; (8000efc <HAL_GPIO_Init+0x32c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d037      	beq.n	8000e0e <HAL_GPIO_Init+0x23e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a57      	ldr	r2, [pc, #348]	; (8000f00 <HAL_GPIO_Init+0x330>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d031      	beq.n	8000e0a <HAL_GPIO_Init+0x23a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a56      	ldr	r2, [pc, #344]	; (8000f04 <HAL_GPIO_Init+0x334>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d02b      	beq.n	8000e06 <HAL_GPIO_Init+0x236>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a55      	ldr	r2, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x338>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d025      	beq.n	8000e02 <HAL_GPIO_Init+0x232>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a54      	ldr	r2, [pc, #336]	; (8000f0c <HAL_GPIO_Init+0x33c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x22e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a53      	ldr	r2, [pc, #332]	; (8000f10 <HAL_GPIO_Init+0x340>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x22a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a52      	ldr	r2, [pc, #328]	; (8000f14 <HAL_GPIO_Init+0x344>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a51      	ldr	r2, [pc, #324]	; (8000f18 <HAL_GPIO_Init+0x348>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x222>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_GPIO_Init+0x34c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x21e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <HAL_GPIO_Init+0x350>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x21a>
 8000de6:	2309      	movs	r3, #9
 8000de8:	e012      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000dea:	230a      	movs	r3, #10
 8000dec:	e010      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000dee:	2308      	movs	r3, #8
 8000df0:	e00e      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e00c      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000df6:	2306      	movs	r3, #6
 8000df8:	e00a      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x240>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x328>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e52:	4a34      	ldr	r2, [pc, #208]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_GPIO_Init+0x354>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f ae86 	bls.w	8000bf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40021400 	.word	0x40021400
 8000f14:	40021800 	.word	0x40021800
 8000f18:	40021c00 	.word	0x40021c00
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	40022400 	.word	0x40022400
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e291      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8087 	beq.w	800105a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f4c:	4b96      	ldr	r3, [pc, #600]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d00c      	beq.n	8000f72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f58:	4b93      	ldr	r3, [pc, #588]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d112      	bne.n	8000f8a <HAL_RCC_OscConfig+0x62>
 8000f64:	4b90      	ldr	r3, [pc, #576]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f70:	d10b      	bne.n	8000f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d06c      	beq.n	8001058 <HAL_RCC_OscConfig+0x130>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d168      	bne.n	8001058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e26b      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x7a>
 8000f94:	4b84      	ldr	r3, [pc, #528]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a83      	ldr	r2, [pc, #524]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e02e      	b.n	8001000 <HAL_RCC_OscConfig+0xd8>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x9c>
 8000faa:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a7e      	ldr	r2, [pc, #504]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7b      	ldr	r2, [pc, #492]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e01d      	b.n	8001000 <HAL_RCC_OscConfig+0xd8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0xc0>
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a72      	ldr	r2, [pc, #456]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xd8>
 8000fe8:	4b6f      	ldr	r3, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a6e      	ldr	r2, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a6b      	ldr	r2, [pc, #428]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fcf0 	bl	80009ec <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fcec 	bl	80009ec <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e21f      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xe8>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fcdc 	bl	80009ec <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fcd8 	bl	80009ec <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e20b      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x110>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d069      	beq.n	800113a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001066:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d11c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x190>
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d116      	bne.n	80010b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x17a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1df      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	493d      	ldr	r1, [pc, #244]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	e040      	b.n	800113a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d023      	beq.n	8001108 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc8e 	bl	80009ec <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc8a 	bl	80009ec <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1bd      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4929      	ldr	r1, [pc, #164]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
 8001106:	e018      	b.n	800113a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc6a 	bl	80009ec <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fc66 	bl	80009ec <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e199      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d038      	beq.n	80011b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d019      	beq.n	8001182 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115a:	f7ff fc47 	bl	80009ec <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fc43 	bl	80009ec <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e176      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x23a>
 8001180:	e01a      	b.n	80011b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_RCC_OscConfig+0x280>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118e:	f7ff fc2d 	bl	80009ec <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fc29 	bl	80009ec <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d903      	bls.n	80011ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e15c      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
 80011a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ee      	bne.n	8001196 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80a4 	beq.w	800130e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a87      	ldr	r2, [pc, #540]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x4d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80011fa:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x4d0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x4d0>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fbf1 	bl	80009ec <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fbed 	bl	80009ec <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e120      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001220:	4b75      	ldr	r3, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x4d0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x31a>
 8001234:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6713      	str	r3, [r2, #112]	; 0x70
 8001240:	e02d      	b.n	800129e <HAL_RCC_OscConfig+0x376>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x33c>
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124e:	4a69      	ldr	r2, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a66      	ldr	r2, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x376>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x35e>
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	4a60      	ldr	r2, [pc, #384]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6713      	str	r3, [r2, #112]	; 0x70
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x376>
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a6:	f7ff fba1 	bl	80009ec <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb9d 	bl	80009ec <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0ce      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x386>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb8b 	bl	80009ec <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb87 	bl	80009ec <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e0b8      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80a4 	beq.w	8001460 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d06b      	beq.n	80013fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d149      	bne.n	80013c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fb58 	bl	80009ec <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fb54 	bl	80009ec <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e087      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	3b01      	subs	r3, #1
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	4313      	orrs	r3, r2
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800138a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fb28 	bl	80009ec <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fb24 	bl	80009ec <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e057      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x478>
 80013be:	e04f      	b.n	8001460 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80013c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb0e 	bl	80009ec <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fb0a 	bl	80009ec <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e03d      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4ac>
 80013f2:	e035      	b.n	8001460 <HAL_RCC_OscConfig+0x538>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x544>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d028      	beq.n	800145c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d121      	bne.n	800145c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d11a      	bne.n	800145c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800142c:	4013      	ands	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001432:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001434:	4293      	cmp	r3, r2
 8001436:	d111      	bne.n	800145c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	3b01      	subs	r3, #1
 8001446:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d107      	bne.n	800145c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0d0      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d910      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 020f 	bic.w	r2, r3, #15
 800149e:	4965      	ldr	r1, [pc, #404]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a58      	ldr	r2, [pc, #352]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80014d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80014ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d040      	beq.n	8001594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d115      	bne.n	8001552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06b      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff fa42 	bl	80009ec <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fa3e 	bl	80009ec <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e053      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d210      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 020f 	bic.w	r2, r3, #15
 80015aa:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f821 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x1cc>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1d0>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1d4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f99e 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00
 8001638:	40023800 	.word	0x40023800
 800163c:	08002554 	.word	0x08002554
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800164c:	b090      	sub	sp, #64	; 0x40
 800164e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001660:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d00d      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x40>
 800166c:	2b08      	cmp	r3, #8
 800166e:	f200 80a1 	bhi.w	80017b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x34>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d003      	beq.n	8001682 <HAL_RCC_GetSysClockFreq+0x3a>
 800167a:	e09b      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_GetSysClockFreq+0x184>)
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001680:	e09b      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001682:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001686:	e098      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001692:	4b4d      	ldr	r3, [pc, #308]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d028      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169e:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	2200      	movs	r2, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	627a      	str	r2, [r7, #36]	; 0x24
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016b0:	2100      	movs	r1, #0
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016b4:	fb03 f201 	mul.w	r2, r3, r1
 80016b8:	2300      	movs	r3, #0
 80016ba:	fb00 f303 	mul.w	r3, r0, r3
 80016be:	4413      	add	r3, r2
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016c2:	fba0 1202 	umull	r1, r2, r0, r2
 80016c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016c8:	460a      	mov	r2, r1
 80016ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80016cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ce:	4413      	add	r3, r2
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	2200      	movs	r2, #0
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	61fa      	str	r2, [r7, #28]
 80016da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016e2:	f7fe fd91 	bl	8000208 <__aeabi_uldivmod>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4613      	mov	r3, r2
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ee:	e053      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	617a      	str	r2, [r7, #20]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001702:	f04f 0b00 	mov.w	fp, #0
 8001706:	4652      	mov	r2, sl
 8001708:	465b      	mov	r3, fp
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	0159      	lsls	r1, r3, #5
 8001714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001718:	0150      	lsls	r0, r2, #5
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ebb2 080a 	subs.w	r8, r2, sl
 8001722:	eb63 090b 	sbc.w	r9, r3, fp
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800173a:	ebb2 0408 	subs.w	r4, r2, r8
 800173e:	eb63 0509 	sbc.w	r5, r3, r9
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	00eb      	lsls	r3, r5, #3
 800174c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001750:	00e2      	lsls	r2, r4, #3
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
 8001756:	eb14 030a 	adds.w	r3, r4, sl
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	eb45 030b 	adc.w	r3, r5, fp
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176e:	4629      	mov	r1, r5
 8001770:	028b      	lsls	r3, r1, #10
 8001772:	4621      	mov	r1, r4
 8001774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001778:	4621      	mov	r1, r4
 800177a:	028a      	lsls	r2, r1, #10
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001782:	2200      	movs	r2, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	60fa      	str	r2, [r7, #12]
 8001788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800178c:	f7fe fd3c 	bl	8000208 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80017a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_RCC_GetSysClockFreq+0x184>)
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3740      	adds	r7, #64	; 0x40
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	017d7840 	.word	0x017d7840

080017d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04c      	b.n	8001886 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <HAL_TIM_Base_Start+0xc0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001806:	d01d      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_TIM_Base_Start+0xc4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d018      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_TIM_Base_Start+0xc8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <HAL_TIM_Base_Start+0xcc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_TIM_Base_Start+0xd0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_TIM_Base_Start+0xd4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_TIM_Base_Start+0x70>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_TIM_Base_Start+0xd8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d115      	bne.n	8001870 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_TIM_Base_Start+0xdc>)
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d015      	beq.n	8001882 <HAL_TIM_Base_Start+0xae>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d011      	beq.n	8001882 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186e:	e008      	b.n	8001882 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e000      	b.n	8001884 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40010000 	.word	0x40010000
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800
 80018a0:	40000c00 	.word	0x40000c00
 80018a4:	40010400 	.word	0x40010400
 80018a8:	40014000 	.word	0x40014000
 80018ac:	40001800 	.word	0x40001800
 80018b0:	00010007 	.word	0x00010007

080018b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e049      	b.n	800195a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe ff5a 	bl	8000794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 fa44 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_TIM_PWM_Start+0x24>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b01      	cmp	r3, #1
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e03c      	b.n	8001a02 <HAL_TIM_PWM_Start+0x9e>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d109      	bne.n	80019a2 <HAL_TIM_PWM_Start+0x3e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	e02f      	b.n	8001a02 <HAL_TIM_PWM_Start+0x9e>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d109      	bne.n	80019bc <HAL_TIM_PWM_Start+0x58>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	bf14      	ite	ne
 80019b4:	2301      	movne	r3, #1
 80019b6:	2300      	moveq	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e022      	b.n	8001a02 <HAL_TIM_PWM_Start+0x9e>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d109      	bne.n	80019d6 <HAL_TIM_PWM_Start+0x72>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	e015      	b.n	8001a02 <HAL_TIM_PWM_Start+0x9e>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d109      	bne.n	80019f0 <HAL_TIM_PWM_Start+0x8c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	e008      	b.n	8001a02 <HAL_TIM_PWM_Start+0x9e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e092      	b.n	8001b30 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d104      	bne.n	8001a1a <HAL_TIM_PWM_Start+0xb6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a18:	e023      	b.n	8001a62 <HAL_TIM_PWM_Start+0xfe>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d104      	bne.n	8001a2a <HAL_TIM_PWM_Start+0xc6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a28:	e01b      	b.n	8001a62 <HAL_TIM_PWM_Start+0xfe>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d104      	bne.n	8001a3a <HAL_TIM_PWM_Start+0xd6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a38:	e013      	b.n	8001a62 <HAL_TIM_PWM_Start+0xfe>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d104      	bne.n	8001a4a <HAL_TIM_PWM_Start+0xe6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a48:	e00b      	b.n	8001a62 <HAL_TIM_PWM_Start+0xfe>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d104      	bne.n	8001a5a <HAL_TIM_PWM_Start+0xf6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a58:	e003      	b.n	8001a62 <HAL_TIM_PWM_Start+0xfe>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fc86 	bl	800237c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <HAL_TIM_PWM_Start+0x1d4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_TIM_PWM_Start+0x120>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2f      	ldr	r2, [pc, #188]	; (8001b3c <HAL_TIM_PWM_Start+0x1d8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_TIM_PWM_Start+0x124>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_TIM_PWM_Start+0x126>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <HAL_TIM_PWM_Start+0x1d4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d01d      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_TIM_PWM_Start+0x1dc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d018      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <HAL_TIM_PWM_Start+0x1e0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_TIM_PWM_Start+0x1e4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <HAL_TIM_PWM_Start+0x1d8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_TIM_PWM_Start+0x1e8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_TIM_PWM_Start+0x18a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_TIM_PWM_Start+0x1ec>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d115      	bne.n	8001b1a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_TIM_PWM_Start+0x1f0>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d015      	beq.n	8001b2c <HAL_TIM_PWM_Start+0x1c8>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d011      	beq.n	8001b2c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	e008      	b.n	8001b2c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e000      	b.n	8001b2e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40010400 	.word	0x40010400
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40000c00 	.word	0x40000c00
 8001b4c:	40014000 	.word	0x40014000
 8001b50:	40001800 	.word	0x40001800
 8001b54:	00010007 	.word	0x00010007

08001b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0ff      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b14      	cmp	r3, #20
 8001b82:	f200 80f0 	bhi.w	8001d66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001d67 	.word	0x08001d67
 8001b94:	08001d67 	.word	0x08001d67
 8001b98:	08001d67 	.word	0x08001d67
 8001b9c:	08001c21 	.word	0x08001c21
 8001ba0:	08001d67 	.word	0x08001d67
 8001ba4:	08001d67 	.word	0x08001d67
 8001ba8:	08001d67 	.word	0x08001d67
 8001bac:	08001c63 	.word	0x08001c63
 8001bb0:	08001d67 	.word	0x08001d67
 8001bb4:	08001d67 	.word	0x08001d67
 8001bb8:	08001d67 	.word	0x08001d67
 8001bbc:	08001ca3 	.word	0x08001ca3
 8001bc0:	08001d67 	.word	0x08001d67
 8001bc4:	08001d67 	.word	0x08001d67
 8001bc8:	08001d67 	.word	0x08001d67
 8001bcc:	08001ce5 	.word	0x08001ce5
 8001bd0:	08001d67 	.word	0x08001d67
 8001bd4:	08001d67 	.word	0x08001d67
 8001bd8:	08001d67 	.word	0x08001d67
 8001bdc:	08001d25 	.word	0x08001d25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f96a 	bl	8001ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6999      	ldr	r1, [r3, #24]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	619a      	str	r2, [r3, #24]
      break;
 8001c1e:	e0a5      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f9bc 	bl	8001fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6999      	ldr	r1, [r3, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	619a      	str	r2, [r3, #24]
      break;
 8001c60:	e084      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fa13 	bl	8002094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0208 	orr.w	r2, r2, #8
 8001c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0204 	bic.w	r2, r2, #4
 8001c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69d9      	ldr	r1, [r3, #28]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
      break;
 8001ca0:	e064      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fa69 	bl	8002180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	61da      	str	r2, [r3, #28]
      break;
 8001ce2:	e043      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 faa0 	bl	8002230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d22:	e023      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fad2 	bl	80022d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d64:	e002      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
      break;
 8001d6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <TIM_Base_SetConfig+0x114>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3d      	ldr	r2, [pc, #244]	; (8001e98 <TIM_Base_SetConfig+0x118>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3c      	ldr	r2, [pc, #240]	; (8001e9c <TIM_Base_SetConfig+0x11c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3a      	ldr	r2, [pc, #232]	; (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2f      	ldr	r2, [pc, #188]	; (8001e94 <TIM_Base_SetConfig+0x114>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d027      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <TIM_Base_SetConfig+0x118>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d023      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <TIM_Base_SetConfig+0x11c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <TIM_Base_SetConfig+0x128>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <TIM_Base_SetConfig+0x12c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <TIM_Base_SetConfig+0x134>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <TIM_Base_SetConfig+0x138>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <TIM_Base_SetConfig+0x114>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_Base_SetConfig+0xf8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40010400 	.word	0x40010400
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800
 8001eb4:	40001800 	.word	0x40001800
 8001eb8:	40001c00 	.word	0x40001c00
 8001ebc:	40002000 	.word	0x40002000

08001ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f023 0201 	bic.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <TIM_OC1_SetConfig+0xd8>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f023 0302 	bic.w	r3, r3, #2
 8001f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <TIM_OC1_SetConfig+0xdc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_OC1_SetConfig+0x64>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <TIM_OC1_SetConfig+0xe0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d10c      	bne.n	8001f3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f023 0308 	bic.w	r3, r3, #8
 8001f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <TIM_OC1_SetConfig+0xdc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_OC1_SetConfig+0x8e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <TIM_OC1_SetConfig+0xe0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d111      	bne.n	8001f72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	621a      	str	r2, [r3, #32]
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	fffeff8f 	.word	0xfffeff8f
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f023 0210 	bic.w	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <TIM_OC2_SetConfig+0xe4>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0320 	bic.w	r3, r3, #32
 8001fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <TIM_OC2_SetConfig+0xe8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_OC2_SetConfig+0x68>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <TIM_OC2_SetConfig+0xec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d10d      	bne.n	8002028 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <TIM_OC2_SetConfig+0xe8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_OC2_SetConfig+0x94>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <TIM_OC2_SetConfig+0xec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d113      	bne.n	8002060 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800203e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	feff8fff 	.word	0xfeff8fff
 800208c:	40010000 	.word	0x40010000
 8002090:	40010400 	.word	0x40010400

08002094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <TIM_OC3_SetConfig+0xe0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <TIM_OC3_SetConfig+0xe4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_OC3_SetConfig+0x66>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <TIM_OC3_SetConfig+0xe8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10d      	bne.n	8002116 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a17      	ldr	r2, [pc, #92]	; (8002178 <TIM_OC3_SetConfig+0xe4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d003      	beq.n	8002126 <TIM_OC3_SetConfig+0x92>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <TIM_OC3_SetConfig+0xe8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d113      	bne.n	800214e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800212c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	621a      	str	r2, [r3, #32]
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	fffeff8f 	.word	0xfffeff8f
 8002178:	40010000 	.word	0x40010000
 800217c:	40010400 	.word	0x40010400

08002180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <TIM_OC4_SetConfig+0xa4>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <TIM_OC4_SetConfig+0xa8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <TIM_OC4_SetConfig+0x68>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <TIM_OC4_SetConfig+0xac>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d109      	bne.n	80021fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	621a      	str	r2, [r3, #32]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	feff8fff 	.word	0xfeff8fff
 8002228:	40010000 	.word	0x40010000
 800222c:	40010400 	.word	0x40010400

08002230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <TIM_OC5_SetConfig+0x98>)
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <TIM_OC5_SetConfig+0x9c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_OC5_SetConfig+0x5e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <TIM_OC5_SetConfig+0xa0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d109      	bne.n	80022a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	621a      	str	r2, [r3, #32]
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	fffeff8f 	.word	0xfffeff8f
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40010400 	.word	0x40010400

080022d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <TIM_OC6_SetConfig+0x9c>)
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <TIM_OC6_SetConfig+0xa0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_OC6_SetConfig+0x60>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <TIM_OC6_SetConfig+0xa4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d109      	bne.n	8002348 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	feff8fff 	.word	0xfeff8fff
 8002374:	40010000 	.word	0x40010000
 8002378:	40010400 	.word	0x40010400

0800237c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2201      	movs	r2, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	621a      	str	r2, [r3, #32]
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023dc:	2302      	movs	r3, #2
 80023de:	e06d      	b.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800241a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002452:	d01d      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d10c      	bne.n	80024aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002496:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40010400 	.word	0x40010400
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40014000 	.word	0x40014000
 80024e0:	40001800 	.word	0x40001800

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d0d      	ldr	r5, [pc, #52]	; (800251c <__libc_init_array+0x38>)
 80024e8:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ea:	1b64      	subs	r4, r4, r5
 80024ec:	10a4      	asrs	r4, r4, #2
 80024ee:	2600      	movs	r6, #0
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	4d0b      	ldr	r5, [pc, #44]	; (8002524 <__libc_init_array+0x40>)
 80024f6:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x44>)
 80024f8:	f000 f820 	bl	800253c <_init>
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	2600      	movs	r6, #0
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	0800256c 	.word	0x0800256c
 8002520:	0800256c 	.word	0x0800256c
 8002524:	0800256c 	.word	0x0800256c
 8002528:	08002570 	.word	0x08002570

0800252c <memset>:
 800252c:	4402      	add	r2, r0
 800252e:	4603      	mov	r3, r0
 8002530:	4293      	cmp	r3, r2
 8002532:	d100      	bne.n	8002536 <memset+0xa>
 8002534:	4770      	bx	lr
 8002536:	f803 1b01 	strb.w	r1, [r3], #1
 800253a:	e7f9      	b.n	8002530 <memset+0x4>

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	bf00      	nop
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
